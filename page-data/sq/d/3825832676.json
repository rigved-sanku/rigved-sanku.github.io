{"data":{"projects":{"edges":[{"node":{"frontmatter":{"title":"Classical and DL Approaches for Image Stitching and Homography Estimation","tech":["Harris Corner","ANMS","RANSAC","CNN","TensorDLT","Spatial Transformers"],"github":null,"external":"https://drive.google.com/file/d/18IIn4fKLJwXArxCD3hCMYhHcUndLkk66/view"},"html":"<p>Implemented end-to-end panorama generation using classical computer vision techniques such as Harris corner detection, ANMS, and RANSAC. Developed robust image stitching algorithms achieving strong feature overlap, enabling multi-image panoramas for challenging scenes like museums and offices. Also engineered both supervised and unsupervised CNN models for homography estimation, integrating the <strong>TensorDLT</strong> algorithm and <strong>Spatial Transformation</strong> layers, which significantly reduced model loss and improved generalization.</p>"}},{"node":{"frontmatter":{"title":"Dynamic MATLAB Simulation and Control of 7-DOF Baxter Robot Arm","tech":["MATLAB","Forward Dynamics","Inverse Kinematics","Gravity Compensation","URDF Integration","GUI Development"],"github":null,"external":"https://drive.google.com/file/d/1oHou6dvBSZXjW5Z-boLfd3GG388aZdY_/view"},"html":"<p>Developed a MATLAB-based simulator for a 7-DOF Baxter robot arm, implementing <strong>forward dynamics</strong>, <strong>inverse kinematics</strong>, and <strong>gravity compensation</strong> for realistic motion control. Integrated the robot’s <strong>URDF file</strong> to extract inertial properties and simulate physical behaviors accurately. Additionally, created a custom <strong>GUI</strong> for real-time interaction and state visualization, enabling monitoring of joint positions, velocities, accelerations, and torque plots.</p>"}},{"node":{"frontmatter":{"title":"Quadrotor Waypoint Tracking with Deep Reinforcement Learning","tech":["PPO","PyTorch","Gym / Custom Simulator","Python"],"github":"https://github.com/rigved-sanku/RL-Project","external":"https://drive.google.com/file/d/1PYpT2Yj0VRsDcxRQEEQq4EWM_TwxmgUH/view"},"html":"<p>Implemented Proximal Policy Optimization (PPO) for quadrotor waypoint tracking, designing custom reward functions and simulation environment. Achieved efficient navigation using a simplified neural network, outperforming traditional PID controllers.</p>"}},{"node":{"frontmatter":{"title":"Deep Q-Learning Network Implementation for Atari Breakout","tech":["DQN","PyTorch","WandB","Deep Reinforcement Learning"],"github":"https://github.com/rigved-sanku/RL-Project","external":"https://drive.google.com/file/d/1qnPuuJ2LFVJ7cA9S-Ua0RLsz7m9WTay1/view"},"html":"<p>Implemented and optimized Deep Q-Learning Network (<strong>DQN</strong>) in PyTorch for the Atari Breakout environment. Conducted hyperparameter tuning using <strong>Weights &#x26; Biases (WandB)</strong> and experimented with <strong>Dueling DQN</strong> and <strong>Double DQN</strong> variants to improve stability and performance. Achieved strong test-time rewards and gained hands-on experience with value-based reinforcement learning methods.</p>"}},{"node":{"frontmatter":{"title":"UAV Interception Controller using LQR Control in MATLAB","tech":["LQR","State-Space Modeling","Nonlinear Control","MATLAB","Quadrotor Dynamics"],"github":null,"external":"https://drive.google.com/file/d/1qnPuuJ2LFVJ7cA9S-Ua0RLsz7m9WTay1/view"},"html":"<p>Implemented an <strong>LQR controller</strong> for autonomous quadrotor interception, working with a <strong>12-dimensional state-space model</strong>. The project involved linearizing nonlinear dynamics, simulating control responses, and validating UAV interception and retrieval tasks. It strengthened my understanding of <strong>nonlinear system control</strong>, <strong>optimal feedback</strong>, and MATLAB-based controller design.</p>"}},{"node":{"frontmatter":{"title":"Model-Free Reinforcement Learning: Monte Carlo and Temporal Difference","tech":["Monte Carlo","SARSA","Q-Learning","ε-Greedy Policies","TD Control","OpenAI Gym"],"github":"https://github.com/rigved-sanku/RL-Project","external":"https://drive.google.com/file/d/1qnPuuJ2LFVJ7cA9S-Ua0RLsz7m9WTay1/view"},"html":"<p>Implemented model-free reinforcement learning algorithms including <strong>Monte Carlo</strong>, <strong>SARSA</strong>, and <strong>Q-Learning</strong> in OpenAI Gym. Applied both on-policy and off-policy methods to solve <strong>BlackJack</strong> and <strong>CliffWalking</strong> environments using ε-greedy policies and temporal-difference (TD) control techniques.</p>"}},{"node":{"frontmatter":{"title":"Markov Decision Process (MDP): Dynamic Programming for RL","tech":["Policy Iteration","Value Iteration","MDP","FrozenLake","OpenAI Gym","Python"],"github":"https://github.com/rigved-sanku/RL-Project","external":"https://drive.google.com/file/d/1qnPuuJ2LFVJ7cA9S-Ua0RLsz7m9WTay1/view"},"html":"<p>Implemented classic <strong>policy iteration</strong> and <strong>value iteration</strong> algorithms using dynamic programming to solve Markov Decision Processes. Applied them to OpenAI Gym’s <strong>FrozenLake</strong> environment, developing both deterministic and stochastic policies, and building a solid foundation in reinforcement learning fundamentals.</p>"}},{"node":{"frontmatter":{"title":"English-German Language Translation using Attention-based Seq2Seq","tech":["LSTM","Seq2Seq","Attention","NumPy","BLEU Score"],"github":"https://github.com/rigved-sanku/NLP-Translation-Attention","external":null},"html":"<p>Engineered LSTM-RNN and sequence-to-sequence (<strong>seq2seq</strong>) models with attention mechanisms from scratch using <strong>NumPy</strong>. Implemented backpropagation through time (BPTT) and trained the model to perform English-German translation. This project deepened my understanding of <strong>encoder–decoder architectures</strong>, <strong>gradient flow</strong>, and how attention improves alignment in machine transla</p>"}},{"node":{"frontmatter":{"title":"Predictive Analysis of COVID-19 using Deep Neural Networks","tech":["MLP","NumPy","Gradient Descent","Loss Functions","Time Series Forecasting"],"github":"https://github.com/rigved-sanku/COVID-Prediction-Numpy","external":null},"html":"<p>Developed a multi-neuron perceptron using <strong>NumPy</strong>, implementing custom gradient descent optimizers and loss functions from scratch. Modeled time-dependent spread of COVID-19 by learning <strong>recurrent relations</strong> for new case predictions. This project showcased a strong grasp of neural network internals and deepened my understanding of core <strong>optimization techniques</strong> in deep learning.</p>"}}]}}}